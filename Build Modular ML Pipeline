import pandas as pd
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, roc_auc_score, accuracy_score

# Load cleaned data
df = pd.read_csv("../data/processed/clean_employee_data.csv")

# Split features and target
X = df.drop("Attrition", axis=1)
y = df["Attrition"]

# Identify feature types
categorical_cols = [col for col in X.columns if X[col].nunique() < 10 and X[col].dtype == "uint8"]
numeric_cols = [col for col in X.columns if col not in categorical_cols]

# Train/Val/Test split
X_temp, X_test, y_temp, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)
X_train, X_val, y_train, y_val = train_test_split(X_temp, y_temp, test_size=0.25, stratify=y_temp, random_state=42)

# Preprocessing steps
numeric_transformer = Pipeline([
    ('scaler', StandardScaler())
])

# No need to encode again if using one-hot-encoded df, but we’ll keep it structured for reuse
preprocessor = ColumnTransformer([
    ('num', numeric_transformer, numeric_cols)
], remainder='passthrough')  # Keep dummy columns untouched

# Build final pipeline
pipeline = Pipeline([
    ('preprocessing', preprocessor),
    ('classifier', RandomForestClassifier(n_estimators=100, max_depth=10, class_weight='balanced', random_state=42))
])

# Fit pipeline
pipeline.fit(X_train, y_train)

# Evaluate
y_pred = pipeline.predict(X_val)
y_prob = pipeline.predict_proba(X_val)[:, 1]

print("✅ Modular Pipeline Results on Validation Set:")
print(f"Accuracy: {accuracy_score(y_val, y_pred):.4f}")
print(f"ROC AUC: {roc_auc_score(y_val, y_prob):.4f}")
print(classification_report(y_val, y_pred))
